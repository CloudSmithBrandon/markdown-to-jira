#!/usr/bin/env node

const path = require("path");
const fs = require("fs");
const util = require("util");

const Credentials = require("local-credentials");
const program = require("commander");
const JiraApi = require("jira-client");
const Table = require("cli-table");

const InputParser = require("../src/InputParser");

const packageDetails = require(path.join(__dirname, "..", "package.json"));

const teams = {
  "Cloud Integrations": 3,
  "Continuous Improvement": 1,
  Platform: 2,
  "Engineering Fundamentals": 4
};

let jira;

(async () => {
  // Allow for command line arguments
  program
    .version(packageDetails.version)
    .option(
      "-c, --credentials [value]",
      "Profile from ~/.atlassian/credentials to use",
      "default"
    )
    .option("-s, --string [value]", "Accept a string on the command line")
    .option("-f, --file [value]", "Read content from a file")
    .option("-d, --dry", "Dry run - don't create any tickets")
    .option("-v, --verbose", "Show requests being made")
    .parse(process.argv);

  // Read the config file if it exists
  let credentials = {};
  try {
    credentials = await new Credentials("~/.atlassian/credentials").get(
      program.credentials
    );
  } catch (e) {
    console.log("Missing Credentials");
    process.exit(1);
  }

  // Check that host, username and token exist
  if (!credentials.host) {
    console.log("Host is required (e.g. your_company.atlassian.net)");
    process.exit(1);
  }
  if (!credentials.username) {
    console.log("Username is required (this is your email address)");
    process.exit(1);
  }
  if (!credentials.token) {
    console.log(
      "Token is required (see https://id.atlassian.com/manage/api-tokens)"
    );
    process.exit(1);
  }

  jira = new JiraApi({
    protocol: "https",
    host: credentials.host,
    username: credentials.username,
    password: credentials.token,
    apiVersion: "2",
    strictSSL: true
  });

  let content = "";

  // Is there a filename? If so read the content from there
  if (program.file) {
    content = fs.readFileSync(program.file);
  }

  // If a string was provided, use that instead
  if (program.string) {
    content = "- " + program.string;
  }

  // Otherwise show an error
  if (!content) {
    console.log(
      "No content provided. Please provide a filename or a string. See --help for more information"
    );
    process.exit(1);
  }

  // Parse the "markdown" format in to tickets
  let tickets = InputParser(content.toString());

  // Build a list of usernames encountered
  const creds = credentials.username.split("@");
  let domain = "";

  // Parse out the domain, if supplied.
  if (creds.length === 2) {
    domain = creds[1];
  }

  // Map assignee name to IDs
  const userIds = {};
  const containsKey = (keys, name) => {
    for (let i = 0; i < keys.length; i++) {
      if (keys[i] === name) {
        return true;
      }
    }

    return false;
  };

  const getAssignee = source => {
    let assignee = source;

    if (domain && !assignee.indexOf(domain) > -1) {
      assignee = `${assignee}@${domain}`;
    }

    return assignee;
  };

  for (t of tickets) {
    let assignee = getAssignee(t.assignee);

    if (!containsKey(Object.keys(userIds), assignee)) {
      const user = await jira.searchUsers({ query: assignee });

      userIds[assignee] = user.length > 0 ? user[0].accountId : undefined;
    }

    for (c of t.children) {
      let assignee = getAssignee(c.assignee);

      if (!containsKey(Object.keys(userIds), assignee)) {
        const user = await jira.searchUsers({ query: assignee });

        userIds[assignee] = user.length > 0 ? user[0].accountId : undefined;
      }
    }
  }

  // Validate that all usernames provided were valid
  // Parent tickets
  tickets = tickets.map(t => {
    let assignee = getAssignee(t.assignee);

    if (assignee) {
      if (!userIds[assignee]) {
        throw new Error(`Invalid assignee: ${assignee}`);
      }
      t.assignee = {
        name: assignee,
        id: userIds[assignee]
      };
    }

    // Child tickets
    t.children = t.children.map(c => {
      assignee = getAssignee(c.assignee);

      if (!userIds[assignee]) {
        throw new Error(`Invalid assignee: ${cssignee}`);
      }
      c.assignee = {
        name: assignee,
        id: userIds[assignee]
      };
      return c;
    });

    return t;
  });

  const table = new Table({
    head: [
      "Key",
      "Title",
      "Assignee",
      "Components",
      "Story Pts",
      "Parent",
      "Epic",
      "Story",
      "Team", 
      "Classification"
    ],
    colWidths: [15, 30, 15, 15, 15, 10, 10, 10, 15, 15]
  });

  for (t of tickets) {
    let parent = await createIssue(
      program.dry,
      credentials.project,
      t.title,
      t.description,
      t.assignee.id,
      t.components,
      t.storyPoints,
      undefined,
      t.epic,
      t.story,
      t.team,
      t.classification
    );
    table.push([
      parent.key,
      t.title,
      t.assignee.name || "",
      t.components.join("\n"),
      t.storyPoints,
      "",
      t.epic,
      t.story,
      t.team,
      t.classification
    ]);

    // If there are any children, create tickets using the parent key generated above
    for (c of t.children) {
      let child = await createIssue(
        program.dry,
        credentials.project,
        c.title,
        c.description,
        c.assignee.id,
        c.components,
        c.storyPoints,
        parent.key,
        undefined,
        c.story,
        undefined,
        c.classification
      );
      table.push([
        child.key,
        c.title,
        c.assignee.name,
        c.components.join("\n"),
        c.storyPoints,
        parent.key,
        "",
        c.story,
        "",
        c.classification
      ]);
    }
  }

  console.log(table.toString());
})();

async function createIssue(
  dryRun,
  project,
  title,
  description,
  assignee,
  components,
  storyPoints,
  parentIssue,
  epic,
  story,
  team,
  classification
) {
  let issueType = !parentIssue ? "Task" : "Sub-task";
  let request = {
    fields: {
      components: components.map(v => {
        return { name: v };
      }),
      assignee: {
        id: assignee
      },
      project: {
        key: project
      },
      summary: title,
      description: description,
      issuetype: {
        name: issueType
      }
    }
  };

  if (epic) {
    request["fields"]["customfield_10014"] = epic;
  }

  if (storyPoints && storyPoints > 0) {
    request["fields"]["customfield_10025"] = storyPoints;
  }

  if (team) {
    if (Number.isInteger(team)) {
      request["fields"]["customfield_10001"] = `${team}`;
    } else {
      request["fields"]["customfield_10001"] = `${teams[team]}`;
    }
  }

  if (classification) {
    request["fields"]["customfield_10036"] = { value: classification };
  }

  if (parentIssue) {
    request["fields"]["parent"] = { key: parentIssue };
  }

  // If we're in dry run mode, resolve early with a generated ID
  if (program.dry) {
    if (program.verbose) {
      console.log(util.inspect(request.fields, false, 5));
    }
    let generatedKey = project + "-9999";
    if (parentIssue) {
      generatedKey = project + "-1234";
    }
    return Promise.resolve({ key: generatedKey });
  }

  let result;
  let linkResult;

  try {
    result = await jira.addNewIssue(request);
  } catch (error) {
    return Promise.reject(error);
  }

  if (story) {
    try {
      linkResult = await jira.issueLink({
        type: {
          name: "Relates"
        },
        inwardIssue: {
          key: result.key
        },
        outwardIssue: {
          key: story
        }
      });
    } catch (error) {
      return Promise.reject(error);
    }
  }

  return Promise.resolve(result);
}
